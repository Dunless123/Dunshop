{"version":3,"file":"test.js","sources":["uni_modules/uv-ui-tools/libs/function/test.js"],"sourcesContent":["/**\n * 验证电子邮箱格式\n */\nfunction email(value) {\n    return /^\\w+((-\\w+)|(\\.\\w+))*\\@[A-Za-z0-9]+((\\.|-)[A-Za-z0-9]+)*\\.[A-Za-z0-9]+$/.test(value)\n}\n\n/**\n * 验证手机格式\n */\nfunction mobile(value) {\n    return /^1([3589]\\d|4[5-9]|6[1-2,4-7]|7[0-8])\\d{8}$/.test(value)\n}\n\n/**\n * 验证URL格式\n */\nfunction url(value) {\n    return /^((https|http|ftp|rtsp|mms):\\/\\/)(([0-9a-zA-Z_!~*'().&=+$%-]+: )?[0-9a-zA-Z_!~*'().&=+$%-]+@)?(([0-9]{1,3}.){3}[0-9]{1,3}|([0-9a-zA-Z_!~*'()-]+.)*([0-9a-zA-Z][0-9a-zA-Z-]{0,61})?[0-9a-zA-Z].[a-zA-Z]{2,6})(:[0-9]{1,4})?((\\/?)|(\\/[0-9a-zA-Z_!~*'().;?:@&=+$,%#-]+)+\\/?)$/\n        .test(value)\n}\n\n/**\n * 验证日期格式\n */\nfunction date(value) {\n    if (!value) return false\n    // 判断是否数值或者字符串数值(意味着为时间戳)，转为数值，否则new Date无法识别字符串时间戳\n    if (number(value)) value = +value\n    return !/Invalid|NaN/.test(new Date(value).toString())\n}\n\n/**\n * 验证ISO类型的日期格式\n */\nfunction dateISO(value) {\n    return /^\\d{4}[\\/\\-](0?[1-9]|1[012])[\\/\\-](0?[1-9]|[12][0-9]|3[01])$/.test(value)\n}\n\n/**\n * 验证十进制数字\n */\nfunction number(value) {\n    return /^[\\+-]?(\\d+\\.?\\d*|\\.\\d+|\\d\\.\\d+e\\+\\d+)$/.test(value)\n}\n\n/**\n * 验证字符串\n */\nfunction string(value) {\n    return typeof value === 'string'\n}\n\n/**\n * 验证整数\n */\nfunction digits(value) {\n    return /^\\d+$/.test(value)\n}\n\n/**\n * 验证身份证号码\n */\nfunction idCard(value) {\n    return /^[1-9]\\d{5}[1-9]\\d{3}((0\\d)|(1[0-2]))(([0|1|2]\\d)|3[0-1])\\d{3}([0-9]|X)$/.test(\n        value\n    )\n}\n\n/**\n * 是否车牌号\n */\nfunction carNo(value) {\n    // 新能源车牌\n    const xreg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}(([0-9]{5}[DF]$)|([DF][A-HJ-NP-Z0-9][0-9]{4}$))/\n    // 旧车牌\n    const creg = /^[京津沪渝冀豫云辽黑湘皖鲁新苏浙赣鄂桂甘晋蒙陕吉闽贵粤青藏川宁琼使领A-Z]{1}[A-Z]{1}[A-HJ-NP-Z0-9]{4}[A-HJ-NP-Z0-9挂学警港澳]{1}$/\n    if (value.length === 7) {\n        return creg.test(value)\n    } if (value.length === 8) {\n        return xreg.test(value)\n    }\n    return false\n}\n\n/**\n * 金额,只允许2位小数\n */\nfunction amount(value) {\n    // 金额，只允许保留两位小数\n    return /^[1-9]\\d*(,\\d{3})*(\\.\\d{1,2})?$|^0\\.\\d{1,2}$/.test(value)\n}\n\n/**\n * 中文\n */\nfunction chinese(value) {\n    const reg = /^[\\u4e00-\\u9fa5]+$/gi\n    return reg.test(value)\n}\n\n/**\n * 只能输入字母\n */\nfunction letter(value) {\n    return /^[a-zA-Z]*$/.test(value)\n}\n\n/**\n * 只能是字母或者数字\n */\nfunction enOrNum(value) {\n    // 英文或者数字\n    const reg = /^[0-9a-zA-Z]*$/g\n    return reg.test(value)\n}\n\n/**\n * 验证是否包含某个值\n */\nfunction contains(value, param) {\n    return value.indexOf(param) >= 0\n}\n\n/**\n * 验证一个值范围[min, max]\n */\nfunction range(value, param) {\n    return value >= param[0] && value <= param[1]\n}\n\n/**\n * 验证一个长度范围[min, max]\n */\nfunction rangeLength(value, param) {\n    return value.length >= param[0] && value.length <= param[1]\n}\n\n/**\n * 是否固定电话\n */\nfunction landline(value) {\n    const reg = /^\\d{3,4}-\\d{7,8}(-\\d{3,4})?$/\n    return reg.test(value)\n}\n\n/**\n * 判断是否为空\n */\nfunction empty(value) {\n    switch (typeof value) {\n    case 'undefined':\n        return true\n    case 'string':\n        if (value.replace(/(^[ \\t\\n\\r]*)|([ \\t\\n\\r]*$)/g, '').length == 0) return true\n        break\n    case 'boolean':\n        if (!value) return true\n        break\n    case 'number':\n        if (value === 0 || isNaN(value)) return true\n        break\n    case 'object':\n        if (value === null || value.length === 0) return true\n        for (const i in value) {\n            return false\n        }\n        return true\n    }\n    return false\n}\n\n/**\n * 是否json字符串\n */\nfunction jsonString(value) {\n    if (typeof value === 'string') {\n        try {\n            const obj = JSON.parse(value)\n            if (typeof obj === 'object' && obj) {\n                return true\n            }\n            return false\n        } catch (e) {\n            return false\n        }\n    }\n    return false\n}\n\n/**\n * 是否数组\n */\nfunction array(value) {\n    if (typeof Array.isArray === 'function') {\n        return Array.isArray(value)\n    }\n    return Object.prototype.toString.call(value) === '[object Array]'\n}\n\n/**\n * 是否对象\n */\nfunction object(value) {\n    return Object.prototype.toString.call(value) === '[object Object]'\n}\n\n/**\n * 是否短信验证码\n */\nfunction code(value, len = 6) {\n    return new RegExp(`^\\\\d{${len}}$`).test(value)\n}\n\n/**\n * 是否函数方法\n * @param {Object} value\n */\nfunction func(value) {\n    return typeof value === 'function'\n}\n\n/**\n * 是否promise对象\n * @param {Object} value\n */\nfunction promise(value) {\n    return object(value) && func(value.then) && func(value.catch)\n}\n\n/** 是否图片格式\n * @param {Object} value\n */\nfunction image(value) {\n    const newValue = value.split('?')[0]\n    const IMAGE_REGEXP = /\\.(jpeg|jpg|gif|png|svg|webp|jfif|bmp|dpg)/i\n    return IMAGE_REGEXP.test(newValue)\n}\n\n/**\n * 是否视频格式\n * @param {Object} value\n */\nfunction video(value) {\n    const VIDEO_REGEXP = /\\.(mp4|mpg|mpeg|dat|asf|avi|rm|rmvb|mov|wmv|flv|mkv|m3u8)/i\n    return VIDEO_REGEXP.test(value)\n}\n\n/**\n * 是否为正则对象\n * @param {Object}\n * @return {Boolean}\n */\nfunction regExp(o) {\n    return o && Object.prototype.toString.call(o) === '[object RegExp]'\n}\n\nexport {\n    email,\n    mobile,\n    url,\n    date,\n    dateISO,\n    number,\n    digits,\n    idCard,\n    carNo,\n    amount,\n    chinese,\n    letter,\n    enOrNum,\n    contains,\n    range,\n    rangeLength,\n    empty,\n    jsonString,\n    landline,\n    object,\n    array,\n    code,\n    func,\n    promise,\n    video,\n    image,\n    regExp,\n    string\n}\n"],"names":[],"mappings":"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"}